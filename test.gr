module Test

from "string" include String
from "stack" include Stack
from "map" include Map
from "option" include Option

provide record TestDefinition {
    name: String,
    assertions: Stack.Stack<() => Option<String>>
}

let tests = Map.make();

provide let def = (name, callback) => { 
    let state = {
        name: name,
        assertions: Stack.make()
    }

    callback(state)

    Map.set(name, state, tests)
}

provide let run = (testName) => {
    match(Map.get(testName, tests)) {
        Some(definition) => {
            while(!Stack.isEmpty(definition.assertions)) {
                let assertion = Option.unwrap(Stack.pop(definition.assertions))

                let result = assertion()

                print(result)
            }
        },
        None => print(testName ++ " not found")
    }    
}

provide let assertEq = (state, expected, actual) => {
    let check = () => {
        if(expected == actual) {
            None()
        }
        else {
            Some(String.concat(toString(expected), toString(actual)))
        }
    }

    Stack.push(check, state.assertions)
}
